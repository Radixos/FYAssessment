#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

//uniform int texture1;
uniform sampler2D heightMap;
uniform int scale;

// read in vector arrays from previous shader
in vec3 posTC[];
in vec2 tcTexCoords[];
//in int heightMap[];

// pass along the interpolated values
out vec3 posES;
out vec2 teTexCoords;
out vec3 norms;

void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

	vec3 posES = interpolate3D(posTC[0], posTC[1], posTC[2]);
	teTexCoords = interpolate2D(tcTexCoords[0], tcTexCoords[1], tcTexCoords[2]);

	float right = (textureOffset(heightMap, teTexCoords, ivec2(1, 0)).r)*scale;
	float left = (textureOffset(heightMap, teTexCoords, ivec2(-1, 0)).r)*scale;
	float up = (textureOffset(heightMap, teTexCoords, ivec2(0, 1)).r)*scale;
	float down = (textureOffset(heightMap, teTexCoords, ivec2(0, -1)).r)*scale;

	norms = normalize(vec3((left - right), 2.0, (up - down)));

	float height = (texture(heightMap, teTexCoords).x);
	posES.y = height * scale;
	gl_Position = projection * view * model * vec4(posES, 1.0);

	//transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
	//gl_Position = projection * view * vec4(posES, 1.0);
}

//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}